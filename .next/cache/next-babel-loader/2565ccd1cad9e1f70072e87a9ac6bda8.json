{"ast":null,"code":"var _jsxFileName = \"/home/gercos/Documents/web/proyecto-evita/components/pets/PetAvatar.js\",\n    _s = $RefreshSig$();\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nexport default function PetAvatar(props) {\n  _s();\n\n  const {\n    0: file,\n    1: setFile\n  } = useState('');\n  const {\n    0: imagePreviewUrl,\n    1: setImagePreviewUrl\n  } = useState('');\n  useEffect(() => {}, [file, imagePreviewUrl]);\n\n  const handleImageChange = e => {\n    e.preventDefault();\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      });\n      this.props.onAddAvatar(reader.result);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  let $imagePreview = null;\n\n  if (imagePreviewUrl) {\n    $imagePreview = __jsx(\"img\", {\n      src: imagePreviewUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 24\n      }\n    });\n  } else {\n    $imagePreview = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 24\n      }\n    }, \"Please selcet an Rata de campo Image\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    type: \"file\",\n    onChange: handleImageChange,\n    className: \"jsx-2013464274\" + \" \" + \"btn btn-outline-dak\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-2013464274\" + \" \" + \"imgPreview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, $imagePreview), __jsx(_JSXStyle, {\n    id: \"2013464274\",\n    __self: this\n  }, \"img.jsx-2013464274{border-radius:50%;object-fit:cover;object-position:center;height:150px;width:150px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2dlcmNvcy9Eb2N1bWVudHMvd2ViL3Byb3llY3RvLWV2aXRhL2NvbXBvbmVudHMvcGV0cy9QZXRBdmF0YXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkNrQixBQUcrQixrQkFDRCxpQkFDTSx1QkFDVixhQUNELFlBQ2QiLCJmaWxlIjoiL2hvbWUvZ2VyY29zL0RvY3VtZW50cy93ZWIvcHJveWVjdG8tZXZpdGEvY29tcG9uZW50cy9wZXRzL1BldEF2YXRhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBldEF2YXRhcihwcm9wcyl7XG4gIFxuICAgIGNvbnN0IFtmaWxlLCBzZXRGaWxlXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtpbWFnZVByZXZpZXdVcmwsIHNldEltYWdlUHJldmlld1VybF0gPSB1c2VTdGF0ZSgnJylcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBcblxuICAgIH0sIFtmaWxlLCBpbWFnZVByZXZpZXdVcmxdKVxuXG4gICAgY29uc3QgaGFuZGxlSW1hZ2VDaGFuZ2UgPSAoZSkgPT57XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgbGV0IGZpbGUgPSBlLnRhcmdldC5maWxlc1swXTtcblxuICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZmlsZTogZmlsZSxcbiAgICAgICAgICBpbWFnZVByZXZpZXdVcmw6IHJlYWRlci5yZXN1bHRcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvcHMub25BZGRBdmF0YXIocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cblxuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcbiAgICB9XG5cbiAgICBsZXQgJGltYWdlUHJldmlldyA9IG51bGw7XG4gICAgaWYgKGltYWdlUHJldmlld1VybCkge1xuICAgICAgJGltYWdlUHJldmlldyA9ICg8aW1nIHNyYz17aW1hZ2VQcmV2aWV3VXJsfSAvPik7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgICRpbWFnZVByZXZpZXc9KDxkaXYgPlBsZWFzZSBzZWxjZXQgYW4gUmF0YSBkZSBjYW1wbyBJbWFnZTwvZGl2PilcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgIFxuICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLWRha1wiIHR5cGU9XCJmaWxlXCIgb25DaGFuZ2U9e2hhbmRsZUltYWdlQ2hhbmdlfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1ByZXZpZXdcIj5cbiAgICAgICAgICAgIHskaW1hZ2VQcmV2aWV3fVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xuICAgICAgICAgICAgaGVpZ2h0OiAxNTBweDtcbiAgICAgICAgICAgIHdpZHRoOiAxNTBweDtcbiAgICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgICA8Lz5cbiAgICApXG5cbn1cbi8qXG5jbGFzcyBQZXRBdmF0YXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZmlsZTogJycsXG4gICAgICBpbWFnZVByZXZpZXdVcmw6ICcnXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUltYWdlQ2hhbmdlID0gdGhpcy5oYW5kbGVJbWFnZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vIFRPRE86IGRvIHNvbWV0aGluZyB3aXRoIC0+IHRoaXMuc3RhdGUuZmlsZVxuICB9XG5cbiAgaGFuZGxlSW1hZ2VDaGFuZ2UoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGxldCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG5cbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgIGltYWdlUHJldmlld1VybDogcmVhZGVyLnJlc3VsdFxuICAgICAgfSk7XG4gICAgICB0aGlzLnByb3BzLm9uQWRkQXZhdGFyKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcbiAgfVxuICAvKlxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtpbWFnZVByZXZpZXdVcmx9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgJGltYWdlUHJldmlldyA9IG51bGw7XG4gICAgaWYgKGltYWdlUHJldmlld1VybCkge1xuICAgICAgJGltYWdlUHJldmlldyA9ICg8aW1nIHNyYz17aW1hZ2VQcmV2aWV3VXJsfSAvPik7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgICRpbWFnZVByZXZpZXc9KDxkaXYgY2xhc3NOYW1lPVwicHJldmlld1RleHRcIj5QbGVhc2Ugc2VsY3QgYW4gUmF0YSBkZSBjYW1wbyBJbWFnZTwvZGl2PilcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJwcmV2aWV3Q29tcG9uZW50XCI+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1kYWtcIiB0eXBlPVwiZmlsZVwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUltYWdlQ2hhbmdlfSAvPlxuICAgICAgICB7Lyo8YnV0dG9uIGNsYXNzTmFtZT1cInN1Ym1pdEJ1dHRvblwiIHR5cGU9XCJzdWJtaXRcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH0+RW52aWFyPC9idXR0b24+ICp9XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWdQcmV2aWV3XCI+XG4gICAgICAgICAgICB7JGltYWdlUHJldmlld31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQZXRBdmF0YXJcbiovIl19 */\\n/*@ sourceURL=/home/gercos/Documents/web/proyecto-evita/components/pets/PetAvatar.js */\"));\n}\n/*\nclass PetAvatar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: '',\n      imagePreviewUrl: ''\n    };\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // TODO: do something with -> this.state.file\n  }\n\n  handleImageChange(e) {\n    e.preventDefault();\n\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      });\n      this.props.onAddAvatar(reader.result)\n    }\n\n    reader.readAsDataURL(file)\n  }\n  /*\n  render() {\n    let {imagePreviewUrl} = this.state;\n    let $imagePreview = null;\n    if (imagePreviewUrl) {\n      $imagePreview = (<img src={imagePreviewUrl} />);\n    }\n    else{\n        $imagePreview=(<div className=\"previewText\">Please selct an Rata de campo Image</div>)\n    }\n\n    return (\n      <div\n        className=\"previewComponent\">\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"btn btn-outline-dak\" type=\"file\" onChange={this.handleImageChange} />\n        {/*<button className=\"submitButton\" type=\"submit\" onClick={this.handleSubmit}>Enviar</button> *}\n        </form>\n        <div className=\"imgPreview\">\n            {$imagePreview}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default PetAvatar\n*/\n\n_s(PetAvatar, \"CP5ixEbdKc95ZFcx7tsK/05PPKE=\");\n\n_c = PetAvatar;\n\nvar _c;\n\n$RefreshReg$(_c, \"PetAvatar\");","map":{"version":3,"sources":["/home/gercos/Documents/web/proyecto-evita/components/pets/PetAvatar.js"],"names":["useState","useEffect","PetAvatar","props","file","setFile","imagePreviewUrl","setImagePreviewUrl","handleImageChange","e","preventDefault","reader","FileReader","target","files","onloadend","setState","result","onAddAvatar","readAsDataURL","$imagePreview"],"mappings":";;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAEpC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACM,eAAD;AAAA,OAAkBC;AAAlB,MAAwCP,QAAQ,CAAC,EAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAGf,CAHQ,EAGN,CAACG,IAAD,EAAOE,eAAP,CAHM,CAAT;;AAKA,QAAME,iBAAiB,GAAIC,CAAD,IAAM;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACA,QAAIR,IAAI,GAAGK,CAAC,CAACI,MAAF,CAASC,KAAT,CAAe,CAAf,CAAX;;AAEAH,IAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACvB,WAAKC,QAAL,CAAc;AACZZ,QAAAA,IAAI,EAAEA,IADM;AAEZE,QAAAA,eAAe,EAAEK,MAAM,CAACM;AAFZ,OAAd;AAIA,WAAKd,KAAL,CAAWe,WAAX,CAAuBP,MAAM,CAACM,MAA9B;AACD,KAND;;AAQAN,IAAAA,MAAM,CAACQ,aAAP,CAAqBf,IAArB;AACD,GAfD;;AAiBA,MAAIgB,aAAa,GAAG,IAApB;;AACA,MAAId,eAAJ,EAAqB;AACnBc,IAAAA,aAAa,GAAI;AAAK,MAAA,GAAG,EAAEd,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjB;AACD,GAFD,MAGI;AACAc,IAAAA,aAAa,GAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAf;AACH;;AAED,SACE,4BAEE;AAAuC,IAAA,IAAI,EAAC,MAA5C;AAAmD,IAAA,QAAQ,EAAEZ,iBAA7D;AAAA,wCAAiB,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA,wCAAe,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKY,aADL,CAHF;AAAA;AAAA;AAAA,k1IADF;AAoBH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAxDwBlB,S;;KAAAA,S","sourcesContent":["import {useState, useEffect} from 'react'\n\nexport default function PetAvatar(props){\n  \n    const [file, setFile] = useState('')\n    const [imagePreviewUrl, setImagePreviewUrl] = useState('')\n\n    useEffect(() => {\n      \n\n    }, [file, imagePreviewUrl])\n\n    const handleImageChange = (e) =>{\n      e.preventDefault();\n\n      let reader = new FileReader();\n      let file = e.target.files[0];\n\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          imagePreviewUrl: reader.result\n        });\n        this.props.onAddAvatar(reader.result)\n      }\n\n      reader.readAsDataURL(file)\n    }\n\n    let $imagePreview = null;\n    if (imagePreviewUrl) {\n      $imagePreview = (<img src={imagePreviewUrl} />);\n    }\n    else{\n        $imagePreview=(<div >Please selcet an Rata de campo Image</div>)\n    }\n\n    return (\n      <>\n      \n        <input className=\"btn btn-outline-dak\" type=\"file\" onChange={handleImageChange} />\n        <div className=\"imgPreview\">\n            {$imagePreview}\n        </div>\n\n      <style jsx>{`\n          img {\n            border-radius: 50%;\n            object-fit: cover;\n            object-position: center;\n            height: 150px;\n            width: 150px;\n          }\n      `}</style>\n      </>\n    )\n\n}\n/*\nclass PetAvatar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: '',\n      imagePreviewUrl: ''\n    };\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // TODO: do something with -> this.state.file\n  }\n\n  handleImageChange(e) {\n    e.preventDefault();\n\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      });\n      this.props.onAddAvatar(reader.result)\n    }\n\n    reader.readAsDataURL(file)\n  }\n  /*\n  render() {\n    let {imagePreviewUrl} = this.state;\n    let $imagePreview = null;\n    if (imagePreviewUrl) {\n      $imagePreview = (<img src={imagePreviewUrl} />);\n    }\n    else{\n        $imagePreview=(<div className=\"previewText\">Please selct an Rata de campo Image</div>)\n    }\n\n    return (\n      <div\n        className=\"previewComponent\">\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"btn btn-outline-dak\" type=\"file\" onChange={this.handleImageChange} />\n        {/*<button className=\"submitButton\" type=\"submit\" onClick={this.handleSubmit}>Enviar</button> *}\n        </form>\n        <div className=\"imgPreview\">\n            {$imagePreview}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default PetAvatar\n*/"]},"metadata":{},"sourceType":"module"}