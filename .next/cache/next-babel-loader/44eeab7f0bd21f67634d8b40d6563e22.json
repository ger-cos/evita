{"ast":null,"code":"var _jsxFileName = \"/home/gercos/Documents/web/proyecto-evita/components/meet/MeetForm.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, Fragment } from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport MeetFirstStep from './MeetFirstStep';\nimport MeetSecondStep from './MeetSecondStep';\nconst emailRegex = RegExp(/^[^@]+@[^@]+\\.[^@]+$/);\nconst phoneRegex = RegExp(/^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4,6})$/); // Step titles\n\nexport default function MeetForm() {\n  const {\n    0: steps,\n    1: setSteps\n  } = useState(0);\n  const {\n    0: fields,\n    1: setFields\n  } = useState({\n    motivo: '',\n    profesional: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    gender: '',\n    date: '',\n    city: '',\n    phone: ''\n  }); // Copy fields as they all have the same name\n\n  const {\n    0: filedError,\n    1: setFieldError\n  } = useState(_objectSpread({}, fields));\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false); // Proceed to next step\n\n  const handleNext = () => setSteps(steps + 1); // Go back to prev step\n\n\n  const handleBack = () => setSteps(steps - 1); // Handle fields change\n\n\n  const handleChange = input => ({\n    target: {\n      value\n    }\n  }) => {\n    // Set values to the fields\n    setFields(_objectSpread(_objectSpread({}, fields), {}, {\n      [input]: value\n    })); // Handle errors\n\n    const formErrors = _objectSpread({}, filedError);\n\n    const lengthValidate = value.length > 0 && value.length < 3;\n\n    switch (input) {\n      case 'firstName':\n        formErrors.firstName = lengthValidate ? 'Minimum 3 characaters required' : '';\n        break;\n\n      case 'lastName':\n        formErrors.lastName = lengthValidate ? 'Minimum 3 characaters required' : '';\n        break;\n\n      case 'email':\n        formErrors.email = emailRegex.test(value) ? '' : 'Invalid email address';\n        break;\n\n      case 'phone':\n        formErrors.phone = phoneRegex.test(value) ? '' : 'Please enter a valid phone number. i.e: xxx-xxx-xxxx';\n        break;\n\n      case 'city':\n        formErrors.city = lengthValidate ? 'Minimum 3 characaters required' : '';\n        break;\n\n      default:\n        break;\n    } // set error hook\n\n\n    Object.values(formErrors).forEach(error => error.length > 0 ? setIsError(true) : setIsError(false)); // set errors hook\n\n    setFieldError(_objectSpread({}, formErrors));\n  };\n\n  const handleSteps = step => {\n    switch (step) {\n      case 0:\n        return __jsx(MeetFirstStep, {\n          handleNext: handleNext,\n          handleChange: handleChange,\n          values: fields,\n          isError: isError,\n          filedError: filedError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 6\n          }\n        });\n\n      case 1:\n        return __jsx(MeetSecondStep, {\n          handleNext: handleNext,\n          handleBack: handleBack,\n          handleChange: handleChange,\n          values: fields,\n          isError: isError,\n          filedError: filedError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 6\n          }\n        });\n\n      case 2:\n        return __jsx(Confirm, {\n          handleNext: handleNext,\n          handleBack: handleBack,\n          values: fields,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 12\n          }\n        });\n\n      default:\n        break;\n    }\n  }; // Handle components\n\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }\n  }, steps === labels.length ? __jsx(Success, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }) : __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(Stepper, {\n    activeStep: steps,\n    style: {\n      paddingTop: 30,\n      paddingBottom: 50\n    },\n    alternativeLabel: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }\n  }, labels.map(label => __jsx(Step, {\n    key: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }\n  }, __jsx(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, label)))), handleSteps(steps)));\n}","map":{"version":3,"sources":["/home/gercos/Documents/web/proyecto-evita/components/meet/MeetForm.js"],"names":["React","useState","Fragment","Stepper","Step","StepLabel","MeetFirstStep","MeetSecondStep","emailRegex","RegExp","phoneRegex","MeetForm","steps","setSteps","fields","setFields","motivo","profesional","firstName","lastName","email","gender","date","city","phone","filedError","setFieldError","isError","setIsError","handleNext","handleBack","handleChange","input","target","value","formErrors","lengthValidate","length","test","Object","values","forEach","error","handleSteps","step","labels","paddingTop","paddingBottom","map","label"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport MeetFirstStep from './MeetFirstStep'\nimport MeetSecondStep from './MeetSecondStep'\n\n\nconst emailRegex = RegExp(/^[^@]+@[^@]+\\.[^@]+$/)\nconst phoneRegex = RegExp(/^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4,6})$/)\n// Step titles\n\n\n\nexport default function MeetForm(){\n\tconst [ steps, setSteps ] = useState(0)\n\tconst [ fields, setFields ] = useState({\n        motivo: '',\n        profesional:'',\n\t\tfirstName: '',\n\t\tlastName: '',\n\t\temail: '',\n\t\tgender: '',\n\t\tdate: '',\n\t\tcity: '',\n\t\tphone: ''\n\t})\n\t// Copy fields as they all have the same name\n\tconst [ filedError, setFieldError ] = useState({\n\t\t...fields\n\t})\n\n\tconst [ isError, setIsError ] = useState(false)\n\n\t// Proceed to next step\n\tconst handleNext = () => setSteps(steps + 1)\n\t// Go back to prev step\n\tconst handleBack = () => setSteps(steps - 1)\n\n\t// Handle fields change\n\tconst handleChange = input => ({ target: { value } }) => {\n\t\t// Set values to the fields\n\t\tsetFields({\n\t\t\t...fields,\n\t\t\t[input]: value\n\t\t})\n\n\t\t// Handle errors\n\t\tconst formErrors = { ...filedError }\n\t\tconst lengthValidate = value.length > 0 && value.length < 3\n\n\t\tswitch (input) {\n\t\t\tcase 'firstName':\n\t\t\t\tformErrors.firstName = lengthValidate ? 'Minimum 3 characaters required' : ''\n\t\t\t\tbreak\n\t\t\tcase 'lastName':\n\t\t\t\tformErrors.lastName = lengthValidate ? 'Minimum 3 characaters required' : ''\n\t\t\t\tbreak\n\t\t\tcase 'email':\n\t\t\t\tformErrors.email = emailRegex.test(value) ? '' : 'Invalid email address'\n\t\t\t\tbreak\n\t\t\tcase 'phone':\n\t\t\t\tformErrors.phone = phoneRegex.test(value) ? '' : 'Please enter a valid phone number. i.e: xxx-xxx-xxxx'\n\t\t\t\tbreak\n\t\t\tcase 'city':\n\t\t\t\tformErrors.city = lengthValidate ? 'Minimum 3 characaters required' : ''\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t// set error hook\n\t\tObject.values(formErrors).forEach(error => (error.length > 0 ? setIsError(true) : setIsError(false)))\n\t\t// set errors hook\n\t\tsetFieldError({\n\t\t\t...formErrors\n\t\t})\n\t}\n\n\tconst handleSteps = step => {\n\t\tswitch (step) {\n\t\t\tcase 0:\n\t\t\t\treturn (\n\t\t\t\t\t<MeetFirstStep\n\t\t\t\t\t\thandleNext={handleNext}\n\t\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\t\tvalues={fields}\n\t\t\t\t\t\tisError={isError}\n\t\t\t\t\t\tfiledError={filedError}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\tcase 1:\n\t\t\t\treturn (\n\t\t\t\t\t<MeetSecondStep\n\t\t\t\t\t\thandleNext={handleNext}\n\t\t\t\t\t\thandleBack={handleBack}\n\t\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\t\tvalues={fields}\n\t\t\t\t\t\tisError={isError}\n\t\t\t\t\t\tfiledError={filedError}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\tcase 2:\n\t\t\t\treturn <Confirm handleNext={handleNext} handleBack={handleBack} values={fields} />\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\t// Handle components\n\treturn (\n\t\t<Fragment>\n\t\t\t{steps === labels.length ? (\n\t\t\t\t<Success />\n\t\t\t) : (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<Stepper activeStep={steps} style={{ paddingTop: 30, paddingBottom: 50 }} alternativeLabel>\n\t\t\t\t\t\t{labels.map(label => (\n\t\t\t\t\t\t\t<Step key={label}>\n\t\t\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\n\t\t\t\t\t\t\t</Step>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Stepper>\n\t\t\t\t\t{handleSteps(steps)}\n\t\t\t\t</Fragment>\n\t\t\t)}\n\t\t</Fragment>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}